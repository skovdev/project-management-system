version: "3.9"

services:
  postgresql:
    image: postgres:latest
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - "5432:5432"
    volumes:
      - ./pgdata:/var/lib/postgresql/data
    networks:
      - project-management-system-network

  eureka-service-discovery:
    image: eureka-service-discovery-1.0
    ports:
      - "8761:8761"
    networks:
        - project-management-system-network

  config-server:
    image: config-server-1.0
    ports:
      - "8888:8888"
    networks:
      - project-management-system-network

  api-gateway:
    image: api-gateway-1.0
    environment:
      CONFIG_SERVER_HOST: config-server
      SPRING_PROFILES_ACTIVE: docker
    ports:
      - "8762:8762"
      - "5009:5009"
    depends_on:
      - eureka-service-discovery
      - config-server
    entrypoint: ../wait-for-it.sh config-server:8888 --timeout=20 -- java -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5009 -jar api-gateway-1.0.jar
    networks:
      - project-management-system-network

  auth-server:
    image: auth-server-1.0
    environment:
      CONFIG_SERVER_HOST: config-server
      SPRING_PROFILES_ACTIVE: docker
    ports:
      - "8080:8080"
      - "5005:5005"
    depends_on:
      - eureka-service-discovery
      - config-server
      - api-gateway
      - kafka
    entrypoint: ../wait-for-it.sh config-server:8888 --timeout=20 -- java -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005 -jar auth-server-1.0.jar
    networks:
      - project-management-system-network

  user-service:
    image: user-service-1.0
    environment:
      CONFIG_SERVER_HOST: config-server
      SPRING_PROFILES_ACTIVE: docker
    ports:
      - "8081:8081"
      - "5006:5006"
    depends_on:
      - eureka-service-discovery
      - config-server
      - api-gateway
      - kafka
    entrypoint: ../wait-for-it.sh config-server:8888 --timeout=20 -- java -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5006 -jar user-service-1.0.jar
    networks:
      - project-management-system-network

  project-service:
    image: project-service-1.0
    environment:
      CONFIG_SERVER_HOST: config-server
      SPRING_PROFILES_ACTIVE: docker
    ports:
      - "8082:8082"
      - "5007:5007"
    depends_on:
      - eureka-service-discovery
      - config-server
      - api-gateway
      - kafka
    entrypoint: ../wait-for-it.sh config-server:8888 --timeout=20 -- java -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5007 -jar project-service-1.0.jar
    networks:
      - project-management-system-network

  task-service:
    image: task-service-1.0
    environment:
      CONFIG_SERVER_HOST: config-server
      SPRING_PROFILES_ACTIVE: docker
    ports:
      - "8083:8083"
      - "5008:5008"
    depends_on:
      - eureka-service-discovery
      - config-server
      - api-gateway
      - kafka
    entrypoint: ../wait-for-it.sh config-server:8888 --timeout=20 -- java -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5008 -jar task-service-1.0.jar
    networks:
      - project-management-system-network

  kafka:
    image: wurstmeister/kafka:latest
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    volumes:
      - ./kafka/kafka-init.sh:/kafka/kafka-init.sh
    command: [ "/bin/sh", "-c", "chmod +x /kafka/kafka-init.sh && /kafka/kafka-init.sh" ]
    depends_on:
      - zookeeper
    networks:
        - project-management-system-network

  zookeeper:
    image: wurstmeister/zookeeper:latest
    ports:
      - "2181:2181"
    networks:
        - project-management-system-network

  app-client:
    image: app-client-1.0
    ports:
      - "3000:3000"
    volumes:
      - /app/node_modules
      - ./:/app
